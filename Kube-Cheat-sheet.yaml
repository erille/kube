Kubernetes-architecture:
- Node: machine avec Kubernetes installé
  Cluster: regroupe plusieurs nodes
  Master: Responsable de la gestion des clusters
  Pod: contient le(s) conteneur(s) (Docker)
  kubeadm: 
  kubelet: kube agent
  pod network: choose pod network solution # va gerer le reseau Kube

Kubernetes-Commands:
- kubectl:
  # Pod
  run pod: kubectl run nginx --image=nginx
  create pod from file: kubectl create -f nginx.yaml
  apply update on pod: kubectl apply 
  delete pod: kubectl delete pod nginx
  view pod: kubectl get pods
  view pods and services: kubectl get pods,svc
  view pod details: kubectl describe pod nginx
  view pod log: kubectl log pod nginx
  # ReplicaSet : permet de definir le nombre de pod qui doivent run [apiVersion=apps/v1 | Kind=ReplicaSet | replicas | Selector]
  create replicatset: kubectl create -f replicationset-definition.yaml
  view replicaset: kubectl get replicatset    # get rs
  view replicaset details: kubectl describe replicaset myapp-replicaset
  edit replicaset: kubectl edit replicatset myapp-replicaset # affiche la configuration du replicaset en mémoire dans VIM
  update replicaset: kubectl replace -f replicatset-definition.yaml
  delete replicatset: kubectl delete replicaset myapp-replicaset
  scale replicatset: kubectl scale replicaset myapp-replicaset --replicas=2
  # Deployment : permet de gérer les mises a jours sur les replicas [apiVersion=apps/v1 | Kind=Deployment | replicas | Selector]
  create deployment: kubectl create -f deployment-definition.yaml  # --record=true > save le change-cause visible dans rollout history
  view deployment: kubectl get deployments
  view deployment details: kubectl describe deployment myapp-deployment
  view all (pod/replicas/deployment): kubectl get all
  view rollout status: kubectl rollout status deployment/myapp-deployment
  view rollout history: kubectl rollout history deployment/myapp-deployment
  apply update on deployment: kubectl apply -f deployment-definition.yaml
  rollback deployment: kubectl rollout undo deployment/myapp-deployment
  # Service : gestion des ports exxposés par containers
  create service: kubectl create -f service-definition.yaml
  view services: kubectl get services
  view service details: kubectl describe service kubernetes
  # Namespace
  view namespaces: kubectl get namespaces
  view current namespace: kubectl config current-context
  view namespace config: kubectl config view # fichier .kube/config
  create namespace: kubectl config set-context dev --namespace=development --cluster=kubernetes --user=kubernetes-admin
  switch namespace: kubectl config use-context dev
  # Persistent Volume
  view pv: kubectl get pv
  create pv: kubectl create -f pv.yaml
  # Minikube
  voir l'url d'un service: minikube service voting-service --url

Kubernetes-Deployment:
- strategy:
    recreate: delete and update
    rolling update: delete 1 / update 1 # default strategy

Kubernetes-networking:
- basic:
    Nodes: Ip address
    Pods: IP address assigne by the node
- services:
    NodePort: Interal port (container) rendu accessible sur le node # repliqué automatiquement sur les nodes d'un meme cluster / containers d'un node ayant le meme selector/labels
      TargetPort: Port exposé du container
      Port: Port du service connecté au container
      NodePort: Port du service exposé coté Node 30000-32767
    ClusterIP: Regroupement de pod de different environement dans un meme "reseau" et envoi les requetes de facon aléatoire vers les nodes # back-end et front-end [back-end service]
    LoadBalancer: Permet d'avoir une seul adresse pour joindre le service. Intégration avec GCP/AWS/Azure, sinon loadbalancer a configurer sois meme, sans config LB = same as NodePort